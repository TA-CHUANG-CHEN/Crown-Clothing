{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  //Your web app's Firebase configuration\n  apiKey: \"AIzaSyBDeW4okDdFyONHAkEVX0p2kCWCQAVrcE4\",\n  authDomain: \"crown-db-37538.firebaseapp.com\",\n  projectId: \"crown-db-37538\",\n  storageBucket: \"crown-db-37538.appspot.com\",\n  messagingSenderId: \"982516620431\",\n  appId: \"1:982516620431:web:bbb8ab26ece7cddd5ee4fa\",\n  measurementId: \"G-9420K6Q3GK\"\n};\nexport const creatUserProfileDocument = async (userAuth, additionalData) => {\n  //userAuth from Auth, it will return a UID\n  if (!userAuth) return; // if there is no user ID exist then return.\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  /* \n  Even we don't give a explicit path like userAuth.uid, doc will still create a new random uid to return (NoSQL). \n  queries method, doc() from firebase NoSQL cloud databasse collection/documentID \n  here is user.uid whatever uid exist or not google will give u one\n  */\n\n  const snapshot = await userRef.get();\n  /* \n  (CRUD) Read = retrive contents from users/userAuth.uid(userRef)\n  */\n\n  if (!snapshot.exists) {\n    // if doc.users.userAuth.uid return false(dont exist) then create.\n    const {\n      displayName,\n      email,\n      photoURL\n    } = userAuth; // get userdata from userauth (google, email/password...)\n\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        // set == create doc.users.dis playname...\n        displayName,\n        email,\n        createdAt,\n        photoURL,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef; //if doc.user.don't have data then create, if exist, return doc.user.displayname...\n};\nexport const addCollectionAndDocuments = (CollectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(CollectionKey);\n  const batch = firestore.batch();\n  objectToAdd.array.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    console.log();\n  });\n}; // Initialize Firebase\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth(); //The Firebase Auth service interface.\n\nexport const firestore = firebase.firestore(); //The Cloud Firestore service interface.\n\nconst provider = new firebase.auth.GoogleAuthProvider(); //Interface that represents an auth provider.\n\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n}); // The authorization server prompts the user to select a user account\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/dazhuangchen/Desktop/Coding/Crown-Clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","creatUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","photoURL","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","CollectionKey","objectToAdd","collectionRef","collection","batch","array","forEach","obj","newDocRef","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACb;AACAC,EAAAA,MAAM,EAAE,yCAFK;AAGbC,EAAAA,UAAU,EAAE,gCAHC;AAIbC,EAAAA,SAAS,EAAE,gBAJE;AAKbC,EAAAA,aAAa,EAAE,4BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,MAAMC,wBAAwB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC1E;AACA,MAAI,CAACD,QAAL,EAAe,OAF2D,CAEnD;;AACvB,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA;AACF;AACA;AACA;AACA;;AACE,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;AACA;AACF;AACA;;AACE,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB;AACA,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA;AAAtB,QAAmCX,QAAzC,CAFoB,CAE+B;;AACnD,UAAMY,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMX,OAAO,CAACY,GAAR,CAAY;AAChB;AACAL,QAAAA,WAFgB;AAGhBC,QAAAA,KAHgB;AAIhBE,QAAAA,SAJgB;AAKhBD,QAAAA,QALgB;AAMhB,WAAGV;AANa,OAAZ,CAAN;AAQD,KATD,CASE,OAAOc,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AACD,SAAOhB,OAAP,CA9B0E,CA8B1D;AACjB,CA/BM;AAiCP,OAAO,MAAMiB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,WAAhB,KAAgC;AACvE,QAAMC,aAAa,GAAGnB,SAAS,CAACoB,UAAV,CAAqBH,aAArB,CAAtB;AACA,QAAMI,KAAK,GAAGrB,SAAS,CAACqB,KAAV,EAAd;AACAH,EAAAA,WAAW,CAACI,KAAZ,CAAkBC,OAAlB,CAA2BC,GAAD,IAAS;AACjC,UAAMC,SAAS,GAAGN,aAAa,CAAClB,GAAd,EAAlB;AACAY,IAAAA,OAAO,CAACC,GAAR;AACD,GAHD;AAID,CAPM,C,CAQP;;AACA3B,QAAQ,CAACuC,aAAT,CAAuBtC,MAAvB;AAEA,OAAO,MAAMuC,IAAI,GAAGxC,QAAQ,CAACwC,IAAT,EAAb,C,CAA8B;;AACrC,OAAO,MAAM3B,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB,C,CAAwC;;AAE/C,MAAM4B,QAAQ,GAAG,IAAIzC,QAAQ,CAACwC,IAAT,CAAcE,kBAAlB,EAAjB,C,CAAyD;;AACzDD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B,E,CAA4D;;AAC5D,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AACP,eAAezC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  //Your web app's Firebase configuration\n  apiKey: \"AIzaSyBDeW4okDdFyONHAkEVX0p2kCWCQAVrcE4\",\n  authDomain: \"crown-db-37538.firebaseapp.com\",\n  projectId: \"crown-db-37538\",\n  storageBucket: \"crown-db-37538.appspot.com\",\n  messagingSenderId: \"982516620431\",\n  appId: \"1:982516620431:web:bbb8ab26ece7cddd5ee4fa\",\n  measurementId: \"G-9420K6Q3GK\",\n};\n\nexport const creatUserProfileDocument = async (userAuth, additionalData) => {\n  //userAuth from Auth, it will return a UID\n  if (!userAuth) return; // if there is no user ID exist then return.\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  /* \n  Even we don't give a explicit path like userAuth.uid, doc will still create a new random uid to return (NoSQL). \n  queries method, doc() from firebase NoSQL cloud databasse collection/documentID \n  here is user.uid whatever uid exist or not google will give u one\n  */\n  const snapshot = await userRef.get();\n  /* \n  (CRUD) Read = retrive contents from users/userAuth.uid(userRef)\n  */\n  if (!snapshot.exists) {\n    // if doc.users.userAuth.uid return false(dont exist) then create.\n    const { displayName, email, photoURL } = userAuth; // get userdata from userauth (google, email/password...)\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        // set == create doc.users.dis playname...\n        displayName,\n        email,\n        createdAt,\n        photoURL,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  return userRef; //if doc.user.don't have data then create, if exist, return doc.user.displayname...\n};\n\nexport const addCollectionAndDocuments = (CollectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(CollectionKey);\n  const batch = firestore.batch();\n  objectToAdd.array.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    console.log()\n  });\n};\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth(); //The Firebase Auth service interface.\nexport const firestore = firebase.firestore(); //The Cloud Firestore service interface.\n\nconst provider = new firebase.auth.GoogleAuthProvider(); //Interface that represents an auth provider.\nprovider.setCustomParameters({ prompt: \"select_account\" }); // The authorization server prompts the user to select a user account\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}