{"ast":null,"code":"import { createSelector } from \"reselect\"; // import memoize from 'lodash.memoize'\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector([selectShop], shop => shop.collections);\nexport const selectCollectionsForPreview = createSelector(selectCollections, //(collections) => Object.keys(collections).map((key) => collections[key])\ncoolections => collection => {\n  for (let api in collection) {\n    collection.map(api);\n  }\n});\nexport const selectCollection = collectionUrlParam => createSelector([selectCollections], collections => collections[collectionUrlParam]);\n/* \nif we use data normaliztion , then we don't need below\nconst COLLECTION_ID_MAP = {\n  hats: 1,\n  sneakers: 2,\n  jackets: 3,\n  womens: 4,\n  mens: 5,\n}; */\n\n/*\n\n1. older version, no effiecient. casue find method will compare all array.\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectorCollections], (collections) =>\n    collections.find(\n      (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]  we don't store collections from  collectionUrlParam\n    )\n  );\n\n2. if we want to store we are using lodas_memoize to do it \nexport const selectCollection = memoize((collectionUrlParam) =>\n  createSelector(\n    [selectorCollections],\n    (collections) => collections[collectionUrlParam]\n  )\n); */","map":{"version":3,"sources":["/Users/dazhuangchen/Desktop/Coding/Crown-Clothing/src/redux/shop/shop.selector.js"],"names":["createSelector","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","coolections","collection","api","map","selectCollection","collectionUrlParam"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B,C,CACA;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAApC;;AAEA,OAAO,MAAMC,iBAAiB,GAAGJ,cAAc,CAC7C,CAACC,UAAD,CAD6C,EAE5CE,IAAD,IAAUA,IAAI,CAACE,WAF8B,CAAxC;AAKP,OAAO,MAAMC,2BAA2B,GAAGN,cAAc,CACvDI,iBADuD,EAEvD;AACCG,WAAD,IAAkBC,UAAD,IAAgB;AAC/B,OAAK,IAAIC,GAAT,IAAgBD,UAAhB,EAA4B;AAC1BA,IAAAA,UAAU,CAACE,GAAX,CAAgBD,GAAhB;AACD;AACF,CAPsD,CAAlD;AAUP,OAAO,MAAME,gBAAgB,GAAIC,kBAAD,IAC9BZ,cAAc,CACZ,CAACI,iBAAD,CADY,EAEXC,WAAD,IAAiBA,WAAW,CAACO,kBAAD,CAFhB,CADT;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSelector } from \"reselect\";\n// import memoize from 'lodash.memoize'\n\nconst selectShop = (state) => state.shop;\n\nexport const selectCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections\n);\n\nexport const selectCollectionsForPreview = createSelector(\n  selectCollections,\n  //(collections) => Object.keys(collections).map((key) => collections[key])\n  (coolections) => (collection) => {\n    for (let api in collection) {\n      collection.map((api))\n    }\n  }\n);\n\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector(\n    [selectCollections],\n    (collections) => collections[collectionUrlParam]\n  );\n\n/* \nif we use data normaliztion , then we don't need below\nconst COLLECTION_ID_MAP = {\n  hats: 1,\n  sneakers: 2,\n  jackets: 3,\n  womens: 4,\n  mens: 5,\n}; */\n/*\n\n1. older version, no effiecient. casue find method will compare all array.\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectorCollections], (collections) =>\n    collections.find(\n      (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]  we don't store collections from  collectionUrlParam\n    )\n  );\n\n2. if we want to store we are using lodas_memoize to do it \nexport const selectCollection = memoize((collectionUrlParam) =>\n  createSelector(\n    [selectorCollections],\n    (collections) => collections[collectionUrlParam]\n  )\n); */\n"]},"metadata":{},"sourceType":"module"}