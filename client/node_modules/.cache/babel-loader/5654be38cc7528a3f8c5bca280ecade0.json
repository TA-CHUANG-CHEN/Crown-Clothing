{"ast":null,"code":"import{createSelector}from\"reselect\";// import memoize from 'lodash.memoize'\nvar selectShop=function selectShop(state){return state.shop;};export var selectCollections=createSelector([selectShop],function(shop){return shop.collections;}// shop.data is Object now!\n);export var selectCollectionsForPreview=createSelector(selectCollections,function(collections){return Object.keys(collections).map(function(key){return collections[key];});}// collections[hats] == collections.hats\n// for...in can literate keys include prototype but won't take Object to Array\n);export var selectCollection=function selectCollection(collectionUrlParam){return createSelector([selectCollections],function(collections){return collections[collectionUrlParam];});};/* \nif we use data normaliztion , then we don't need below\nconst COLLECTION_ID_MAP = {\n  hats: 1,\n  sneakers: 2,\n  jackets: 3,\n  womens: 4,\n  mens: 5,\n}; \n\n1. older version, no effiecient. casue find method will compare all array.\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectorCollections], (collections) =>\n    collections.find(\n      (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]  we don't store collections from  collectionUrlParam\n    )\n  );\n\n2. if we want to store we are using lodas_memoize to do it \nexport const selectCollection = memoize((collectionUrlParam) =>\n  createSelector(\n    [selectorCollections],\n    (collections) => collections[collectionUrlParam]\n  )\n); */","map":{"version":3,"sources":["/Users/dazhuangchen/Desktop/Coding/Crown-Clothing/src/redux/shop/shop.selector.js"],"names":["createSelector","selectShop","state","shop","selectCollections","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam"],"mappings":"AAAA,OAASA,cAAT,KAA+B,UAA/B,CACA;AAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAjB,EAAnB,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAGJ,cAAc,CAC7C,CAACC,UAAD,CAD6C,CAE7C,SAACE,IAAD,QAAUA,CAAAA,IAAI,CAACE,WAAf,EAA2B;AAFkB,CAAxC,CAKP,MAAO,IAAMC,CAAAA,2BAA2B,CAAGN,cAAc,CACvDI,iBADuD,CAEvD,SAACC,WAAD,QAAiBE,CAAAA,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6B,SAACC,GAAD,QAASL,CAAAA,WAAW,CAACK,GAAD,CAApB,EAA7B,CAAjB,EACA;AACA;AAJuD,CAAlD,CAOP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,kBAAD,QAC9BZ,CAAAA,cAAc,CACZ,CAACI,iBAAD,CADY,CAEZ,SAACC,WAAD,QAAiBA,CAAAA,WAAW,CAACO,kBAAD,CAA5B,EAFY,CADgB,EAAzB,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSelector } from \"reselect\";\n// import memoize from 'lodash.memoize'\n\nconst selectShop = (state) => state.shop;\n\nexport const selectCollections = createSelector(\n  [selectShop],\n  (shop) => shop.collections // shop.data is Object now!\n);\n\nexport const selectCollectionsForPreview = createSelector(\n  selectCollections,\n  (collections) => Object.keys(collections).map((key) => collections[key])  \n  // collections[hats] == collections.hats\n  // for...in can literate keys include prototype but won't take Object to Array\n);\n\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector(\n    [selectCollections],\n    (collections) => collections[collectionUrlParam]\n  );\n\n/* \nif we use data normaliztion , then we don't need below\nconst COLLECTION_ID_MAP = {\n  hats: 1,\n  sneakers: 2,\n  jackets: 3,\n  womens: 4,\n  mens: 5,\n}; \n\n1. older version, no effiecient. casue find method will compare all array.\nexport const selectCollection = (collectionUrlParam) =>\n  createSelector([selectorCollections], (collections) =>\n    collections.find(\n      (collection) => collection.id === COLLECTION_ID_MAP[collectionUrlParam]  we don't store collections from  collectionUrlParam\n    )\n  );\n\n2. if we want to store we are using lodas_memoize to do it \nexport const selectCollection = memoize((collectionUrlParam) =>\n  createSelector(\n    [selectorCollections],\n    (collections) => collections[collectionUrlParam]\n  )\n); */\n"]},"metadata":{},"sourceType":"module"}