{"ast":null,"code":"var _jsxFileName = \"/Users/dazhuangchen/Desktop/Coding/Crown-Clothing/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport CollectionPageContainer from \"./../collection/collection.container\";\nimport CollectionsOVerviewCOntainer from \"../../components/collections-overview/collections-overview.container\";\n/* const CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview); //HOC for loading\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); //HOC for loading\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    console.log(this.props);\n    fetchCollectionsStartAsync();\n  }\n  /*  //we don't need construtor && super to keep this because react help us to do it.\n  state = {\n    loading: true,\n  };\n   // now we need to retrieve shopdata from firebase\n  unsubscribeFromSnapshot = null; */\n\n  /*  componentDidMount() {\n    const { updateCollections } = this.props;\n    const collectionsRef = firestore.collection(\"collections\"); //  ath collections\n     fetch way!  eight level nesting omg!\n     fetch(  \n      \"https://firestore.googleapis.com/v1/projects/crown-db-37538/databases/(default)/documents/collections\"\n    )\n      .then((res) => res.json())\n      .then((collections) => console.log(collections)); \n    collectionsRef.get().then((snapshot) => {\n      //snapshot is actually object we can see inside. like doc(),empty()...\n      const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n      console.log(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    });\n    2. this.unsubscribeFromSnapshot = collectionsRef.onSnapshot(\n      async (snapshot) => {\n        //snapshot is actually object we can see inside. like doc(),empty()...\n        const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    );\n  } */\n\n\n  render() {\n    const {\n      match\n    } = this.props;\n    console.log(this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shop-page\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${match.path}`\n        /* component={CollectionsOverview}*/\n        ,\n        component: CollectionsOVerviewCOntainer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${match.path}/:collectionId`,\n        component: CollectionPageContainer //we use container pattern && compose(Redux) to isolate\n        // render={(props) => (\n        //   <CollectionPageWithSpinner\n        //     isLoading={CollectionPageContainer} //return false will become true.\n        //     {...props}\n        //   />\n        // )}\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n/* const mapDispatchToProps = (dispatch) => ({\n  updateCollections: (collectionsMap) =>\n    dispatch(updateCollections(collectionsMap)),\n});\n */\n\n\nexport default connect(null, mapDispatchToProps)(ShopPage); // import SHOP_DATA from \"./shop.data\"; //json.file\n\n/* class ShopPage extends React.Component {\n  constructor(props) {\n    super(props);\n    /*\n    props can initial this.prop, this will be direct to class ShopPage, \n    In most cases, the value of this is determined by how a function is called (bind or call/apply) or runtime like windows.\n    this.state = {\n      collections: SHOP_DATA,\n    \n      SHOP_DATA will trun into \n      collections: [\n       {\n        id: 1,\n        title: \"Hats\",\n        routeName: \"hats\",\n        items: [..]\n        ...\n       }\n      ],...\n    };\n    \n  } */\n\n/* \n  render() {\n    const { collections } = this.state;\n    /* \n    1. Braces {} are used during the declaration of Object Literals, or to enclose blocks of code, \n       but const { collections } = this.state is use for Destructuring assignment.\n    2. Parenthesis () in JavaScript are used for function calls.\n    3. Brackets [] are typically mostly used for accessing the properties of an Object (or the elements of an Array), \n       so mylist[3] fetches the fourth element in the Array.\n    */\n//{match} = path from app.js /shop\n\n/*  /shop/ match has parameter path/params/url/exist... */","map":{"version":3,"sources":["/Users/dazhuangchen/Desktop/Coding/Crown-Clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","fetchCollectionsStartAsync","CollectionPageContainer","CollectionsOVerviewCOntainer","ShopPage","Component","componentDidMount","props","console","log","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,OAAOC,uBAAP,MAAoC,sCAApC;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AAEA;AACA;AACA;;;;AACA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AACrCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEL,MAAAA;AAAF,QAAiC,KAAKM,KAA5C;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB;AACAN,IAAAA,0BAA0B;AAC3B;AACD;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEES,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKJ,KAAvB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,IAAI,EAAG,GAAEI,KAAK,CAACC,IAAK;AAAG;AAFzB;AAGE,QAAA,SAAS,EAAET;AAHb;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,KAAD;AACE,QAAA,IAAI,EAAG,GAAEQ,KAAK,CAACC,IAAK,gBADtB;AAEE,QAAA,SAAS,EAAEV,uBAFb,CAEuC;AACrC;AACA;AACA;AACA;AACA;AACA;;AARF;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA/DoC;;AAkEvC,MAAMW,kBAAkB,GAAIC,QAAD,KAAe;AACxCb,EAAAA,0BAA0B,EAAE,MAAMa,QAAQ,CAACb,0BAA0B,EAA3B;AADF,CAAf,CAA3B;AAGA;AACA;AACA;AACA;AACA;;;AACA,eAAeD,OAAO,CAAC,IAAD,EAAOa,kBAAP,CAAP,CAAkCT,QAAlC,CAAf,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","sourcesContent":["import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport CollectionPageContainer from \"./../collection/collection.container\";\nimport CollectionsOVerviewCOntainer from \"../../components/collections-overview/collections-overview.container\";\n\n/* const CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview); //HOC for loading\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); //HOC for loading\n */\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const { fetchCollectionsStartAsync } = this.props;\n    console.log(this.props);\n    fetchCollectionsStartAsync();\n  }\n  /*  //we don't need construtor && super to keep this because react help us to do it.\n  state = {\n    loading: true,\n  };\n\n  // now we need to retrieve shopdata from firebase\n  unsubscribeFromSnapshot = null; */\n  /*  componentDidMount() {\n    const { updateCollections } = this.props;\n    const collectionsRef = firestore.collection(\"collections\"); //  ath collections\n\n    fetch way!  eight level nesting omg!\n     fetch(  \n      \"https://firestore.googleapis.com/v1/projects/crown-db-37538/databases/(default)/documents/collections\"\n    )\n      .then((res) => res.json())\n      .then((collections) => console.log(collections)); \n    collectionsRef.get().then((snapshot) => {\n      //snapshot is actually object we can see inside. like doc(),empty()...\n      const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n      console.log(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({ loading: false });\n    });\n    2. this.unsubscribeFromSnapshot = collectionsRef.onSnapshot(\n      async (snapshot) => {\n        //snapshot is actually object we can see inside. like doc(),empty()...\n        const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n        updateCollections(collectionsMap);\n        this.setState({ loading: false });\n      }\n    );\n  } */\n  render() {\n    const { match } = this.props;\n\n    console.log(this.props);\n\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`} /* component={CollectionsOverview}*/\n          component={CollectionsOVerviewCOntainer}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          component={CollectionPageContainer}  //we use container pattern && compose(Redux) to isolate\n          // render={(props) => (\n          //   <CollectionPageWithSpinner\n          //     isLoading={CollectionPageContainer} //return false will become true.\n          //     {...props}\n          //   />\n          // )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\n});\n/* const mapDispatchToProps = (dispatch) => ({\n  updateCollections: (collectionsMap) =>\n    dispatch(updateCollections(collectionsMap)),\n});\n */\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\n// import SHOP_DATA from \"./shop.data\"; //json.file\n\n/* class ShopPage extends React.Component {\n  constructor(props) {\n    super(props);\n    /*\n    props can initial this.prop, this will be direct to class ShopPage, \n    In most cases, the value of this is determined by how a function is called (bind or call/apply) or runtime like windows.\n    this.state = {\n      collections: SHOP_DATA,\n    \n      SHOP_DATA will trun into \n      collections: [\n       {\n        id: 1,\n        title: \"Hats\",\n        routeName: \"hats\",\n        items: [..]\n        ...\n       }\n      ],...\n    };\n    \n  } */\n/* \n  render() {\n    const { collections } = this.state;\n    /* \n    1. Braces {} are used during the declaration of Object Literals, or to enclose blocks of code, \n       but const { collections } = this.state is use for Destructuring assignment.\n    2. Parenthesis () in JavaScript are used for function calls.\n    3. Brackets [] are typically mostly used for accessing the properties of an Object (or the elements of an Array), \n       so mylist[3] fetches the fourth element in the Array.\n    */\n//{match} = path from app.js /shop\n\n/*  /shop/ match has parameter path/params/url/exist... */\n"]},"metadata":{},"sourceType":"module"}