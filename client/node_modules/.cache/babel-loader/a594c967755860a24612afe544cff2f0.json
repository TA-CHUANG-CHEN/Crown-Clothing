{"ast":null,"code":"import { takeEvery, call, put } from \"redux-saga/effects\"; // put == dispatch (usually)\n\nimport { firestore, convertCollectionSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport ShopActionTypes from \"./shop.types\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop.actions\";\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I am fired\");\n\n  try {\n    const collectionsRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionsRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n  /* collectionsRef\n    .get()\n    .then((snapshot) => {\n      const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap)); // step:2  success to access data\n    })\n    .catch((error) => dispatch(fetchCollectionsFailure(error.message))); // step:2  catch if fetch failure, */\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_STARTS, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/dazhuangchen/Desktop/Coding/Crown-Clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","firestore","convertCollectionSnapshotToMap","ShopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionsRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_STARTS"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC,C,CAA2D;;AAC3D,SACEC,SADF,EAEEC,8BAFF,QAGO,+BAHP;AAIA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;AAKA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AACA,MAAI;AACF,UAAMC,cAAc,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAvB;AACA,UAAMC,QAAQ,GAAG,MAAMF,cAAc,CAACG,GAAf,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACG,8BAAD,EAAiCS,QAAjC,CAAjC;AACA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;AACC;AACD,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMlB,SAAS,CACbK,eAAe,CAACc,wBADH,EAEbX,qBAFa,CAAf;AAID","sourcesContent":["import { takeEvery, call, put } from \"redux-saga/effects\"; // put == dispatch (usually)\nimport {\n  firestore,\n  convertCollectionSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\nimport ShopActionTypes from \"./shop.types\";\nimport {\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n} from \"./shop.actions\";\n\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"I am fired\");\n  try {\n    const collectionsRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionsRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n  /* collectionsRef\n    .get()\n    .then((snapshot) => {\n      const collectionsMap = convertCollectionSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap)); // step:2  success to access data\n    })\n    .catch((error) => dispatch(fetchCollectionsFailure(error.message))); // step:2  catch if fetch failure, */\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    ShopActionTypes.FETCH_COLLECTIONS_STARTS,\n    fetchCollectionsAsync\n  );\n}\n"]},"metadata":{},"sourceType":"module"}